This module use 7-base_geometry.py
==================================

This library has a function that validates an integer called
``integer_validator``

Firstly, initialize it.
::
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it.
::
	>>> bg = BaseGeometry()

use to validate integer
::
	>>> bg.integer_validator("my_int", 12)

Throws TypeError when not integer
::
	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

Throws ValueError when value is negative
::
	>>> bg.integer_validator("my_int", -12)
	Traceback (most recent call last):
        ...
	ValueError: my_int must be greater than 0

Throws a valueerror when value is 0
::
	>>> bg.integer_validator("my_int", 0)
        Traceback (most recent call last):
	...
	ValueError: my_int must be greater than 0

Throws a TypeError if args is not provided
::
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Throws a TypeError if 1 arg is not provided
::
        >>> bg.integer_validator("mine")
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

Throws a valueerror when value is None
::
        >>> bg.integer_validator("my_int", None)
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer

Try area()
::
	>>> bg.area()
        Traceback (most recent call last):
        ...
	Exception: area() is not implemented

Throws a valueerror when value is bool
::
        >>> bg.integer_validator("my_int", True)
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer


Throws a valueerror when value is list
::
        >>> bg.integer_validator("my_int", [3])
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer

Throws a valueerror when value is tuple
::
        >>> bg.integer_validator("my_int", (3,))
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer

Throws a valueerror when value is str
::
        >>> bg.integer_validator("my_int", "3")
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer

Throws a valueerror when value is list
::
        >>> bg.integer_validator("my_int", {4, 3})
        Traceback (most recent call last):
        ...
        TypeError: my_int must be an integer

